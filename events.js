// Generated by CoffeeScript 1.6.3
var proto,
  __slice = [].slice;

proto = require('proto-scope').proto;

exports.events = proto.as({
  init: function() {
    return this.events = {};
  },
  emit: function() {
    var args, event, listener, _i, _len, _ref;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this.events[event] != null) {
      _ref = this.events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listener.apply(null, args);
      }
      return true;
    } else {
      return false;
    }
  },
  addListener: function(event, listener) {
    var _base;
    this.emit('newListener', event, listener);
    ((_base = this.events)[event] != null ? (_base = this.events)[event] : _base[event] = []).push(listener);
    return this;
  },
  once: function(event, listener) {
    var fn,
      _this = this;
    fn = function() {
      _this.removeListener(event, fn);
      return listener.apply(null, arguments);
    };
    this.on(event, fn);
    return this;
  },
  removeListener: function(event, listener) {
    var l;
    if (this.events[event]) {
      this.events[event] = (function() {
        var _i, _len, _ref, _results;
        _ref = this.events[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l !== listener) {
            _results.push(l);
          }
        }
        return _results;
      }).call(this);
    }
    return this;
  },
  removeAllListeners: function(event) {
    delete this.events[event];
    return this;
  },
  on: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.addListener.apply(this, args);
  },
  off: function(event) {
    return this.removeListener(event);
  }
});
